package com.mycompany.demo_frontend.view;

import com.mycompany.demo_frontend.dto.DocGiaDTO;
import com.mycompany.demo_frontend.service.DocGiaService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class PickDocGia extends JFrame {
    private DocGiaService docGiaService = new DocGiaService();
    private DocGiaSelectedListener listener;

    public PickDocGia() {
        initComponents();
        setTitle("Chọn Độc Giả");
        setSize(400, 350);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        loadTableDocGia();
        initSearchFunction();

        // Xử lý chọn độc giả khi nhấp vào hàng
        tableDocGia.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tableDocGia.getSelectedRow();
                if (row != -1) {
                    int madocgia = (int) tableDocGia.getValueAt(row, 0);
                    if (listener != null) {
                        listener.onDocGiaSelected(madocgia);
                    }
                    dispose();
                }
            }
        });
    }
    
    private void initSearchFunction() {
        txtTimKiem.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void insertUpdate(javax.swing.event.DocumentEvent e) { filterDocGia(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { filterDocGia(); }
            public void changedUpdate(javax.swing.event.DocumentEvent e) { filterDocGia(); }
        });
    }

    private void filterDocGia() {
        String keyword = txtTimKiem.getText().trim();
        String searchType = jComboBox1.getSelectedItem().toString();
        String criteria = searchType.equals("Mã độc giả") ? "madocgia" : "tendocgia";

        try {
            List<DocGiaDTO> listDocGia = keyword.isEmpty() ? docGiaService.getAllDocGia() : docGiaService.searchDocGia(keyword, criteria);
            DefaultTableModel model = (DefaultTableModel) tableDocGia.getModel();
            model.setRowCount(0);
            for (DocGiaDTO dg : listDocGia) {
                model.addRow(new Object[]{dg.getMadocgia(), dg.getTendocgia()});
            }
        } catch (Exception e) {
            Logger.getLogger(PickDocGia.class.getName()).log(Level.SEVERE, "Lỗi khi tìm kiếm độc giả", e);
            JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm độc giả: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTableDocGia() {
        try {
            List<DocGiaDTO> listDocGia = docGiaService.getAllDocGia();
            DefaultTableModel model = (DefaultTableModel) tableDocGia.getModel();
            model.setRowCount(0);
            for (DocGiaDTO dg : listDocGia) {
                model.addRow(new Object[]{dg.getMadocgia(), dg.getTendocgia()});
            }
        } catch (Exception e) {
            Logger.getLogger(PickDocGia.class.getName()).log(Level.SEVERE, "Lỗi khi tải danh sách độc giả", e);
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách độc giả: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void selectDocGia(int madocgia) {
        DefaultTableModel model = (DefaultTableModel) tableDocGia.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if ((int) model.getValueAt(i, 0) == madocgia) {
                tableDocGia.setRowSelectionInterval(i, i);
                tableDocGia.scrollRectToVisible(tableDocGia.getCellRect(i, 0, true));
                break;
            }
        }
    }

    public void setDocGiaSelectedListener(DocGiaSelectedListener listener) {
        this.listener = listener;
    }

    public interface DocGiaSelectedListener {
        void onDocGiaSelected(int madocgia);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        txtTimKiem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDocGia = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("DANH SÁCH ĐỘC GIẢ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã độc giả", "Tên độc giả" }));

        tableDocGia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Mã độc giả", "Tên độc giả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableDocGia);
        if (tableDocGia.getColumnModel().getColumnCount() > 0) {
            tableDocGia.getColumnModel().getColumn(0).setResizable(false);
            tableDocGia.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel1)
                        .addGap(0, 142, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTimKiem))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PickDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PickDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PickDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PickDocGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PickDocGia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableDocGia;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
